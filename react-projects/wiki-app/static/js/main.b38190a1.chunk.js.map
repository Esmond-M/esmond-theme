{"version":3,"sources":["images/wikipedia-icon.png","components/Search.jsx","App.js","serviceWorker.js","index.js","images/wiki.svg"],"names":["module","exports","__webpack_require__","p","API_URL","Search","state","query","results","json_data","wiki_data","errorMessage","errorStyle","display","image_size","width","getInfo","event","preventDefault","_this","setState","searchResults","spinnerStyle","axios","get","concat","then","data","pages","length","catch","error","this","target","value","_this2","react_default","a","createElement","className","style","alt","src","document","location","origin","role","onSubmit","type","placeholder","onChange","handleInputChange","required","map","key","pageid","JSON","stringify","original","source","title","dangerouslySetInnerHTML","__html","extract","href","rel","Component","App","src_components_Search","Boolean","window","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0SCKlCC,EAAU,qCA0HDC,6MAvHbC,MAAQ,CACNC,MAAO,GACPC,QAAS,GACTC,UAAW,GACXC,UAAW,GACXC,aAAc,GACdC,WAAY,CAAEC,QAAS,QACvBC,WAAY,CAAEC,MAAO,WAGvBC,QAAU,SAAAC,GACRA,EAAMC,iBACNC,EAAKC,SAAS,CACZC,cAAe,GACfC,aAAc,CAAET,QAAS,SACzBD,WAAY,CAAEC,QAAS,UAEzBU,IACGC,IADH,GAAAC,OAEOrB,EAFP,6DAAAqB,OAGMN,EAAKb,MAAMC,MAHjB,0FAMGmB,KAAK,SAAAhB,GACJS,EAAKC,SAAS,CACZV,UAAWA,EAAUiB,KAAKpB,MAAMqB,QAGF,IAA5BT,EAAKb,MAAMC,MAAMsB,QACnBV,EAAKC,SAAS,CACZT,aAAY,gCAAAc,OACVN,EAAKb,MAAMC,MADD,qCAGZK,WAAY,CAAEC,QAAS,aAI5BiB,MAAM,SAAAC,GACLZ,EAAKC,SAAS,CACZT,aAAc,4CACdC,WAAY,CAAEC,QAAS,+FAKbI,GAChBe,KAAKZ,SAAS,CACZb,MAAOU,EAAMgB,OAAOC,yCAIf,IAAAC,EAAAH,KACCtB,EAAcsB,KAAK1B,MAAnBI,UAER,OACE0B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,IACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BAAd,oBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wDACbH,EAAAC,EAAAC,cAAA,OACEE,MAAOR,KAAK1B,MAAMQ,WAClByB,UAAU,uBACVE,IAAI,YACJC,IAAKC,SAASC,SAASC,OAAS,sGAElCT,EAAAC,EAAAC,cAAA,QAAMQ,KAAK,SAASC,SAAU,SAAA9B,GAAK,OAAIkB,EAAKnB,QAAQC,KAClDmB,EAAAC,EAAAC,cAAA,SACEU,KAAK,SACLT,UAAU,OACVU,YAAY,6BACZC,SAAU,SAAAjC,GAAK,OAAIkB,EAAKgB,kBAAkBlC,IAC1CiB,MAAOF,KAAK1B,MAAMC,MAClB6C,UAAQ,IAEVhB,EAAAC,EAAAC,cAAA,UAAQU,KAAK,UACXZ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAGjBH,EAAAC,EAAAC,cAAA,WACC5B,EAAU2C,IAAI,SAAA3C,GAAS,OACtB0B,EAAAC,EAAAC,cAAA,WACEC,UAAU,+CACVe,IAAK5C,EAAU6C,QAEfnB,EAAAC,EAAAC,cAAA,OACEC,UAAU,4BACVE,IAAI,YACJC,IACGc,KAAKC,UAAU/C,EAAUgD,UAAU,IAClChD,EAAUgD,SAASC,QACrBV,MAIJb,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kCACX7B,EAAUkD,OAEbxB,EAAAC,EAAAC,cAAA,KACEC,UAAU,8CACVsB,wBAAyB,CAAEC,OAAM,GAAArC,OAAKf,EAAUqD,QAAf,UAEnC3B,EAAAC,EAAAC,cAAA,KACE0B,KAAI,iCAAAvC,OAAmCf,EAAUkD,OACjD3B,OAAO,SACPgC,IAAI,uBAHN,0BASJ7B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BAA2BC,MAAOR,KAAK1B,MAAMM,YACxDwB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yCACfP,KAAK1B,MAAMK,uBAhHHuD,aCWNC,2LARX,OACE/B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8B,EAAD,cAJUF,cCIEG,QACW,cAA7BC,OAAO1B,SAAS2B,UAEe,UAA7BD,OAAO1B,SAAS2B,UAEhBD,OAAO1B,SAAS2B,SAASC,MACvB,2DCXNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAAShC,SAASiC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,KAAK,SAAAsD,GACjCA,EAAaC,mCEnInBjF,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.b38190a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wikipedia-icon.ff25ff9f.png\";","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport logo from \"../images/wikipedia-icon.png\";\r\nimport \"./Search.css\";\r\nimport placeholder from \"../images/wiki.svg\";\r\nconst API_URL = \"https://en.wikipedia.org/w/api.php\";\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    query: \"\",\r\n    results: [],\r\n    json_data: [],\r\n    wiki_data: [],\r\n    errorMessage: \"\",\r\n    errorStyle: { display: \"none\" },\r\n    image_size: { width: \"60px\" }\r\n  };\r\n\r\n  getInfo = event => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      searchResults: [],\r\n      spinnerStyle: { display: \"block\" },\r\n      errorStyle: { display: \"none\" }\r\n    });\r\n    axios\r\n      .get(\r\n        `${API_URL}?action=query&generator=search&formatversion=2&gsrsearch=${\r\n          this.state.query\r\n        }&piprop=thumbnail|name|original&prop=pageimages|extracts&format=json&exintro&origin=*`\r\n      )\r\n      .then(wiki_data => {\r\n        this.setState({\r\n          wiki_data: wiki_data.data.query.pages\r\n        });\r\n\r\n        if (this.state.query.length === 0) {\r\n          this.setState({\r\n            errorMessage: ` Unable to find results for \"${\r\n              this.state.query\r\n            }\\\". Consider revising your search.`,\r\n            errorStyle: { display: \"block\" }\r\n          });\r\n        }\r\n      })\r\n      .catch(error => {\r\n        this.setState({\r\n          errorMessage: \" Unable to load Wikipedia search results.\",\r\n          errorStyle: { display: \"block\" }\r\n        });\r\n      });\r\n  };\r\n\r\n  handleInputChange(event) {\r\n    this.setState({\r\n      query: event.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { wiki_data } = this.state;\r\n\r\n    return (\r\n      <main className=\"\">\r\n        <h3 className=\"text-center text-white pt-2\">Wikipedia Search</h3>\r\n        <div className=\"container inputMidHeight d-block mx-auto text-center\">\r\n          <img\r\n            style={this.state.image_size}\r\n            className=\"d-block mb-2 mx-auto\"\r\n            alt=\"wiki-logo\"\r\n            src={document.location.origin + \"/wp-content/themes/esmond-theme-portfolio/react-projects/wiki-app/static/media/wikipedia-icon.ff25ff9f.png\"}\r\n          />\r\n          <form role=\"search\" onSubmit={event => this.getInfo(event)}>\r\n            <input\r\n              type=\"search\"\r\n              className=\"w-50\"\r\n              placeholder=\"&#x1F50E; Search for...\"\r\n              onChange={event => this.handleInputChange(event)}\r\n              value={this.state.query}\r\n              required\r\n            />\r\n            <button type=\"submit\">\r\n              <i className=\"fa fa-search\" />\r\n            </button>\r\n          </form>\r\n          <br />\r\n          {wiki_data.map(wiki_data => (\r\n            <article\r\n              className=\"article-width mx-auto d-block bg-black mt-4 \"\r\n              key={wiki_data.pageid}\r\n            >\r\n              <img\r\n                className=\"d-block mx-auto w-50 pt-2\"\r\n                alt=\"wiki-logo\"\r\n                src={\r\n                  (JSON.stringify(wiki_data.original, true) &&\r\n                    wiki_data.original.source) ||\r\n                  placeholder\r\n                }\r\n              />\r\n\r\n              <h2 className=\"pt-2 pl-3 text-white text-left\">\r\n                {wiki_data.title}\r\n              </h2>\r\n              <p\r\n                className=\"wiki-biotext text-white text-left pb-3 pl-3\"\r\n                dangerouslySetInnerHTML={{ __html: `${wiki_data.extract}...` }}\r\n              />\r\n              <a\r\n                href={`https://en.wikipedia.org/wiki/${wiki_data.title}`}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Continue Reading...\r\n              </a>\r\n            </article>\r\n          ))}\r\n          <p className=\"text-white error-message\" style={this.state.errorStyle}>\r\n            <span className=\"fa fa-exclamation-circle fa-lg fa-fw\" />\r\n            {this.state.errorMessage}\r\n          </p>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport $ from \"jquery\";\r\nimport Popper from \"popper.js\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\nimport Search from \"./components/Search\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Search />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"react-app-polyfill/ie9\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/wiki.45efda9c.svg\";"],"sourceRoot":""}